% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/retrieveClassificationTable.R
\name{retrieveClassificationTable}
\alias{retrieveClassificationTable}
\title{Retrieve classifications and correspondence tables stored as Linked Open Data}
\usage{
retrieveClassificationTable(
  endpoint,
  prefix,
  conceptScheme,
  language = "en",
  level = "ALL",
  CSVout = NULL,
  showQuery = TRUE,
  localData = NULL
)
}
\arguments{
\item{endpoint}{Character. SPARQL endpoint to query. Valid values: \code{"CELLAR"} or \code{"FAO"}.}

\item{prefix}{The namespace prefix identifying the classification. You can retrieve available prefixes using the \code{classificationList()} function.}

\item{conceptScheme}{Character. Unique identifier associated with a specific classification table.}

\item{language}{Character. Language for labels, includes, and excludes. Default: \code{"en"}.}

\item{level}{Character. Level to retrieve in a hierarchical classification. Default is \code{"ALL"}.}

\item{CSVout}{Logical or character. If \code{TRUE}, saves the table to a default CSV file. If a file path is provided, saves to that file.
Default is \code{NULL} (no file is saved).}

\item{showQuery}{Logical. If \code{TRUE}, returns the SPARQL query used along with the data. Default is \code{TRUE}.}

\item{localData}{Logical. If \code{TRUE}, retrieves internal (local) data rather than live SPARQL results. Default: \code{FALSE}.}
}
\value{
A list (if \code{showQuery = TRUE}) with the SPARQL query and the correspondence table, or just the table otherwise.
}
\description{
Retrieve correspondence tables from the CELLAR and FAO repositories.
}
\details{
The behaviour of this function is contingent on the global option \code{useLocalDataForVignettes}:
The default behaviour (when the option is not set, or set to something else than \code{TRUE}), is that is queries live SPARQL endpoints online.
When the option is set to \code{TRUE} via \code{options(useLocalDataForVignettes = TRUE)}, the function returns local (embedded) data instead of querying live SPARQL endpoints.
This is useful for building vignettes or offline testing.
}
\examples{
# \dontrun{
endpoint <- "CELLAR"
prefix <- "cn2022"
ID_table <- "CN2022_NST2007"
result <- tryCatch({
  retrieveCorrespondenceTable(endpoint, prefix, ID_table)
}, error = function(e) {
  message("SPARQL query failed: ", e$message)
  NULL
})

if (!is.null(result)) {
  cat(result[[1]])      # Show SPARQL query
  head(result[[2]])     # Show top of result table
}
# }
}
