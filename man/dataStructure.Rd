% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataStructure.R
\name{dataStructure}
\alias{dataStructure}
\title{Retrieve information about the structure of each classification table from the CELLAR and FAO repositories}
\usage{
dataStructure(
  endpoint,
  prefix,
  conceptScheme,
  language = "en",
  showQuery = FALSE
)
}
\arguments{
\item{endpoint}{SPARQL endpoints provide a standardized way to access data sets, 
making it easier to retrieve specific information or perform complex queries on linked data.
The valid values are \code{"CELLAR"} or \code{"FAO"}.}

\item{prefix}{Prefixes are typically defined at the beginning of a SPARQL query 
and are used throughout the query to make it more concise and easier to read. 
Multiple prefixes can be defined in a single query to cover different namespaces used in the data set.
The function 'classificationList()' can be used to generate the prefixes for the selected classification table.}

\item{conceptScheme}{Refers to a unique identifier associated to specific classification table. 
The conceptScheme can be obtained by utilizing the "classificationList()" function.}

\item{language}{The language for which the labels (level names) are to be provided. This is an optional argument which defaults to "en".}

\item{showQuery}{The valid values are \code{FALSE} or \code{TRUE}. In both cases the correspondence table as an R object. 
If needed to view the SPARQL query used, the argument should be set as \code{TRUE}. By default, NO SPARQL query is produced.}
}
\value{
\code{dataStructure()} returns a table with one line per hierarchical level and the following columns:        
 \itemize{
    \item Concept_Scheme: the classification for which the data structure is listed
    \item Depth: the hierarchical position of each level
    \item Level: the label (for the given language) assigned to each level
    \item Count: the number of categories at each level
}
}
\description{
Retrieve information about the structure of a classification table (from either CELLAR and FAO repositories)
}
\details{
The behaviour of this function is contingent on the global option \code{useLocalDataForVignettes}:
The default behaviour (when the option is not set, or set to something else than \code{TRUE}), it queries live SPARQL endpoints online.
When the option is set to \code{TRUE} via \code{options(useLocalDataForVignettes = TRUE)}, the function returns local (embedded) data instead of querying live SPARQL endpoints.
This is useful for building vignettes or offline testing.
}
\examples{
# Minimal example using CELLAR endpoint
endpoint <- "CELLAR"
prefix <- "nace2"
conceptScheme <- "nace2"
dataStructure(endpoint, prefix, conceptScheme)
\dontrun{
# Full example: get data for all CELLAR codes
list_data <- classificationList("ALL")
data_CELLAR <- list()
for (i in 1:nrow(list_data$CELLAR)) {
  prefix <- list_data$CELLAR[i, 1]
  conceptScheme <- list_data$CELLAR[i, 2]
  data_CELLAR[[i]] <- dataStructure("CELLAR", prefix, conceptScheme)
}
names(data_CELLAR) <- list_data$CELLAR[, 1]
}
}
